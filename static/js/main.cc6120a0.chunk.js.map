{"version":3,"sources":["logo.svg","components/Post.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Post","props","className","id","userID","title","text","Form","onSubmit","required","type","name","placeholder","cols","rows","value","App","state","posts","handleSubmit","bind","fetch","then","response","json","setState","console","log","event","preventDefault","target","post","userId","body","this","map","index","key","Date","now","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,wJCE5B,SAASC,EAAKC,GAC3B,OACE,yBAAKC,UAAU,QACb,0BAAMA,UAAU,WAAW,MAAQD,EAAME,IACzC,wBAAID,UAAU,gBAAd,iBAAwCD,EAAMG,SAC9C,wBAAIF,UAAU,cAAcD,EAAMI,OAClC,uBAAGH,UAAU,aAAaD,EAAMK,OCMvBC,MAZf,SAAcN,GACZ,OACE,0BAAMO,SAAUP,EAAMO,UACpB,2BAAOC,UAAQ,EAACC,KAAK,OAAOC,KAAK,KAAKR,GAAG,GAAGS,YAAY,iBACxD,2BAAOH,UAAQ,EAACC,KAAK,OAAOC,KAAK,SAASR,GAAG,GAAGS,YAAY,qBAC5D,2BAAOH,UAAQ,EAACC,KAAK,OAAOC,KAAK,QAAQR,GAAG,GAAGS,YAAY,eAC3D,8BAAUH,UAAQ,EAACE,KAAK,OAAOR,GAAG,GAAGU,KAAK,KAAKC,KAAK,KAAKF,YAAY,oBACrE,2BAAOF,KAAK,SAASK,MAAM,aAAab,UAAU,iBC+DzCc,E,kDAjEb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAEDgB,MAAQ,CACXC,MAAO,IAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAPH,E,gEAUE,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CAAEP,MAAOM,IACvBE,QAAQC,IAAI,EAAKT,Y,mCAIVU,GACXA,EAAMC,iBACNH,QAAQC,IAAIC,EAAME,OAAO,GAAKf,OAC9B,IAAIgB,EAAO,CACT5B,GAAIyB,EAAME,OAAO,GAAKf,MACtBiB,OAAQJ,EAAME,OAAO,GAAKf,MAC1BV,MAAOuB,EAAME,OAAO,GAAKf,MACzBkB,KAAML,EAAME,OAAO,GAAKf,OAG1Ba,EAAME,OAAO,GAAKf,MAAQ,GAC1Ba,EAAME,OAAO,GAAKf,MAAQ,GAC1Ba,EAAME,OAAO,GAAKf,MAAQ,GAC1Ba,EAAME,OAAO,GAAKf,MAAQ,GAE1BW,QAAQC,IAAII,GACZG,KAAKT,SAAS,CAAEP,MAAM,GAAD,mBAAMgB,KAAKjB,MAAMC,OAAjB,CAAwBa,Q,+BAGrC,IACAb,EAAUgB,KAAKjB,MAAfC,MACR,OACE,oCACE,yBAAKhB,UAAU,OAAOC,GAAG,WAErBe,EAAMiB,KAAI,SAACJ,EAAMK,GACf,OACE,kBAACpC,EAAD,CACEqC,IAAKD,EAAQE,KAAKC,MAClBpC,GAAI4B,EAAK5B,GACTC,OAAQ2B,EAAKC,OACb3B,MAAO0B,EAAK1B,MACZC,KAAMyB,EAAKE,WAMrB,yBAAK/B,UAAU,QACb,kBAAC,EAAD,CAAMM,SAAU0B,KAAKf,qB,GA3DbqB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.cc6120a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nexport default function Post(props) {\n  return (\n    <div className=\"post\">\n      <span className=\"post-id\">{\"ID:\" + props.id}</span>\n      <h4 className=\"post-user-id\">{`UserID:${props.userID}`}</h4>\n      <h2 className=\"post-title\">{props.title}</h2>\n      <p className=\"post-text\">{props.text}</p>\n    </div>\n  )\n}\n","import React from 'react';\n\nfunction Form(props) {\n  return (\n    <form onSubmit={props.onSubmit}>\n      <input required type=\"text\" name=\"id\" id=\"\" placeholder=\"Send your ID\" />\n      <input required type=\"text\" name=\"userId\" id=\"\" placeholder=\"Send your UserID\" />\n      <input required type=\"text\" name=\"title\" id=\"\" placeholder=\"Send title\" />\n      <textarea required name=\"body\" id=\"\" cols=\"30\" rows=\"10\" placeholder=\"Write your post\" />\n      <input type=\"submit\" value=\"Send posts\" className=\"submit-btn\" />\n    </form>\n  )\n}\n\nexport default Form;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Post from \"./components/Post\";\nimport Form from \"./components/Form\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      posts: []\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\n      .then(response => response.json())\n      .then(json => {\n        this.setState({ posts: json })\n        console.log(this.posts)\n      });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(event.target[\"0\"].value)\n    let post = {\n      id: event.target[\"0\"].value,\n      userId: event.target[\"1\"].value,\n      title: event.target[\"2\"].value,\n      body: event.target[\"3\"].value\n    }\n\n    event.target[\"0\"].value = \"\";\n    event.target[\"1\"].value = \"\";\n    event.target[\"2\"].value = \"\";\n    event.target[\"3\"].value = \"\";\n\n    console.log(post);\n    this.setState({ posts: [...this.state.posts, post] });\n  }\n\n  render() {\n    const { posts } = this.state;\n    return (\n      <>\n        <div className=\"grid\" id=\"article\">\n          {\n            posts.map((post, index) => {\n              return (\n                <Post\n                  key={index + Date.now()}\n                  id={post.id}\n                  userID={post.userId}\n                  title={post.title}\n                  text={post.body}\n                />\n              )\n            })\n          }\n        </div>\n        <div className=\"grid\">\n          <Form onSubmit={this.handleSubmit} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}